rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function userPath(uid) {
        return /databases/(default)/documents/users/$(uid)
    }

    function getUser(uid) {
        return get(userPath(uid))
    }

    match /users/{user} {
      allow read: if resource.data.medic
        || request.auth.uid == user
        || getUser(request.auth.uid).data.staff;

      allow update: if (
        getUser(request.auth.uid).data.staff
        || request.auth.uid == user 
            && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['medic', 'staff'])
        )
        && request.resource.data.email == request.auth.token.email;

      allow create: if (request.auth.uid == user || getUser(request.auth.uid).data.staff)
        && !request.resource.data.staff
        && !request.resource.data.medic
        && request.resource.data.email == request.auth.token.email;

      match /private/{document=**} {
        allow read, write: if request.auth.uid == user
            || getUser(request.auth.uid).data.staff;
      }
    }

    match /products/{document=**} {
      allow read: if request.auth != null;
      allow write: if getUser(request.auth.uid).data.staff;
    }

    match /sections/{document=**} {
      allow read: if request.auth != null;
      allow write: if getUser(request.auth.uid).data.staff;
    }

    match /appointments/{appointment_id} {
      allow read: if request.auth != null
        || userPath(request.auth.uid) == request.resource.data.responsible
        || getUser(request.auth.uid).data.staff;

      allow update: if (
            userPath(request.auth.uid) == request.resource.data.responsible
            || getUser(request.auth.uid).data.staff
        )
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['owner'])
        && request.resource.data.end > request.resource.data.start;

      allow create: if (userPath(request.auth.uid) == request.resource.data.owner || getUser(request.auth.uid).data.staff)
        && !request.resource.data.approved
        && get(request.resource.data.responsible).data.medic
        && request.time < request.resource.data.start
        && request.resource.data.end > request.resource.data.start;

      function AppointmentData() {
        return get(/databases/(default)/documents/appointments/$(appointment_id)).data
      }

      match /private/{document=**} {
        allow read: if userPath(request.auth.uid) == AppointmentData().owner
            || userPath(request.auth.uid) == AppointmentData().responsible
            || getUser(request.auth.uid).data.staff;

        allow update: if userPath(request.auth.uid) == AppointmentData().responsible
            || getUser(request.auth.uid).data.staff;

        allow create: if userPath(request.auth.uid) == AppointmentData().owner
            || getUser(request.auth.uid).data.staff;
      }
    }

    match /locations/{document=**} {
      allow read: if request.auth != null;
      allow write: if getUser(request.auth.uid).data.staff;
    }

    match /carts/{document=**} {
      allow read: if userPath(request.auth.uid) == resource.data.owner
        || getUser(request.auth.uid).data.staff;

      function updateCheckFields(data, changedKeys) {
        return !changedKeys.hasAny(["owner"])
            && (!("lastDate" in changedKeys) || !data.recurring || data.lastDate < data.nextDate)
            && (!("nextDate" in changedKeys) || !data.recurring || data.nextDate > request.time);
      }

      allow update: if (
            userPath(request.auth.uid) == resource.data.owner
            || getUser(request.auth.uid).data.staff
        ) && updateCheckFields(
            request.resource.data,
            request.resource.data.diff(resource.data).affectedKeys()
        );

      allow create: if (userPath(request.auth.uid) == request.resource.data.owner || getUser(request.auth.uid).data.staff)
        && (
            !request.resource.data.keys().hasAny(["nextDate"])
            || request.time < request.resource.data.nextDate
        );
    }
  }
}
